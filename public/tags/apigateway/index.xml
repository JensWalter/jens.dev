<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apigateway on My personal blog</title>
    <link>/tags/apigateway/</link>
    <description>Recent content in apigateway on My personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2019 10:08:54 +0200</lastBuildDate><atom:link href="/tags/apigateway/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Retrieve the API key name in AWS API Gateway</title>
      <link>/2019/04/12/retrieve-the-api-keyname-in-aws-api-gateway/</link>
      <pubDate>Fri, 12 Apr 2019 10:08:54 +0200</pubDate>
      
      <guid>/2019/04/12/retrieve-the-api-keyname-in-aws-api-gateway/</guid>
      <description>The AWS API-Gateway does support authentication through API Key. It is a very convenient feature to have, especially since other functionality such a throttling and request quotas also come through that feature.
That is all good, as long as all your required functionality is provided by AWS. But what I needed was business-like Dashboard which provides insight into how my API was used by different clients.
Since all clients are identified by API Key, I hoped for some mechanism within API-Gateway to provide information such as key name to my Lambda implementation.</description>
    </item>
    
    <item>
      <title>hosting a Cloudfront site with S3 and API Gateway</title>
      <link>/2017/05/09/hosting-a-cloudfront-site-with-s3-and-api-gateway/</link>
      <pubDate>Tue, 09 May 2017 13:08:54 +0200</pubDate>
      
      <guid>/2017/05/09/hosting-a-cloudfront-site-with-s3-and-api-gateway/</guid>
      <description>Here my scenario I try to cover this time.
Scenario:
 host a webpage through S3 with Cloudfront as CDN host an API through ApiGateway with Cloudfront in front  As picture this would look like this:
The use case would be to host the API and static resources within one domain. The obvious perk of this architecture would be no more CORS dependency.
I use a CloudFormation template as project definition for this task.</description>
    </item>
    
  </channel>
</rss>
