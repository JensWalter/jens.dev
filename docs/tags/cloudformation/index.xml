<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloudformation on My personal blog</title>
    <link>https://jens.dev/tags/cloudformation.html</link>
    <description>Recent content in cloudformation on My personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jan 2018 10:08:54 +0200</lastBuildDate><atom:link href="https://jens.dev/tags/cloudformation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing DynamoDB triggers (streams) using CloudFormation</title>
      <link>https://jens.dev/2018/01/10/implementing-dynamodb-triggers-streams-using-cloudformation.html</link>
      <pubDate>Wed, 10 Jan 2018 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2018/01/10/implementing-dynamodb-triggers-streams-using-cloudformation.html</guid>
      <description>In serverless architectures, as much as possible of the implementation should be done event-driven. One driver of this is using triggers whenever possible.
DynamoDB comes in very handy since it does support triggers through DynamoDB Streams. On the other end of a Stream usually is a Lambda function which processes the changed information asynchronously.
So I tried building that pattern and recognized, that it is not that straightforward to implement in cloudformation.</description>
    </item>
    
    <item>
      <title>Using parameters through multiple nested CloudFormation stacks</title>
      <link>https://jens.dev/2017/12/10/using-parameters-through-multiple-nested-cloudformation-stacks.html</link>
      <pubDate>Sun, 10 Dec 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/12/10/using-parameters-through-multiple-nested-cloudformation-stacks.html</guid>
      <description>As stacks grow, it is not always advisable to have all resources managed in one single stack. So to split up resources by their usage leads to the question on how can CloudFormation reference data from a different stack.
AWS has a simple answer for that, &amp;ldquo;use import/export&amp;rdquo;. The drawback of this approach is, the exports are globally visible. So If you only want to share data between nested stacks you can use normal output values.</description>
    </item>
    
    <item>
      <title>Integrate API Gateway with SNS using CloudFormation</title>
      <link>https://jens.dev/2017/09/13/integrate-api-gateway-with-sns-using-cloudformation.html</link>
      <pubDate>Wed, 13 Sep 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/09/13/integrate-api-gateway-with-sns-using-cloudformation.html</guid>
      <description>In my last post, I described how an API Gateway can interact with Kinesis Firehose. This time I used the same approach to connect the API Gateway to SNS.
With this, I could simplify the access pattern for my application by exposing an internal HTTP Endpoint which then routes all requests to a corresponding SNS Topic.
So here an overview picture of what I am about to build.
The first part of the CloudFormation template is the definition of the API Gateway.</description>
    </item>
    
    <item>
      <title>Integrate API Gateway with Kinesis Firehose using CloudFormation</title>
      <link>https://jens.dev/2017/08/24/integrate-api-gateway-with-kinesis-firehose-using-cloudformation.html</link>
      <pubDate>Thu, 24 Aug 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/08/24/integrate-api-gateway-with-kinesis-firehose-using-cloudformation.html</guid>
      <description>Integrating API Gateway with other AWS Services can be pretty important to increase the scope of an API into other services.
What I wanted to achieve was a cheaper upload mechanism for S3. The easiest way to allow upload through API gateway is to call a Lambda for every API call and then upload the payload into an S3 bucket. But this is rather costly if you increase the throughput from a few single call to a few hundred calls a second.</description>
    </item>
    
    <item>
      <title>visualizing a cloudformation template</title>
      <link>https://jens.dev/2017/06/24/visualizing-a-cloudformation-template.html</link>
      <pubDate>Sat, 24 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/24/visualizing-a-cloudformation-template.html</guid>
      <description>CloudFormation templates grow pretty fast over the period of a project. To not loose the overview of how stuff works and how resources interact with each other, it is very helpful to have a graphical representation of your template at hand.
In the past, I usually build an overview on draw.io and then started coding the actual template. The problem with this approach was, that all changes had to be done simultaneously in both systems.</description>
    </item>
    
    <item>
      <title>extending cloudformation with custom resources</title>
      <link>https://jens.dev/2017/06/18/extending-cloudformation-with-custom-resources.html</link>
      <pubDate>Sun, 18 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/18/extending-cloudformation-with-custom-resources.html</guid>
      <description>CloudFormation is a pretty capable tool which provides templating functionality for most of the Amazon web services. But still, keeping up with the release cadence of all the AWS services isn&amp;rsquo;t that easy. So there always is a little gap of what features the console offers and what CloudFormation offers.
So for this use case (and some others like initial data load), AWS introduced custom resources. This Resource basically represents an AWS lambda invocation which is called whenever your template gets instantiated, removed or update.</description>
    </item>
    
    <item>
      <title>hosting a Cloudfront site with S3 and API Gateway</title>
      <link>https://jens.dev/2017/05/09/hosting-a-cloudfront-site-with-s3-and-api-gateway.html</link>
      <pubDate>Tue, 09 May 2017 13:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/05/09/hosting-a-cloudfront-site-with-s3-and-api-gateway.html</guid>
      <description>Here my scenario I try to cover this time.
Scenario:
 host a webpage through S3 with Cloudfront as CDN host an API through ApiGateway with Cloudfront in front  As picture this would look like this:
The use case would be to host the API and static resources within one domain. The obvious perk of this architecture would be no more CORS dependency.
I use a CloudFormation template as project definition for this task.</description>
    </item>
    
    <item>
      <title>a serverless cron in AWS CloudFormation</title>
      <link>https://jens.dev/2017/02/28/a-serverless-cron-in-aws-cloudformation.html</link>
      <pubDate>Tue, 28 Feb 2017 16:52:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/02/28/a-serverless-cron-in-aws-cloudformation.html</guid>
      <description>Here my scenario I try to cover this time.
Scenario:
 Raise an event based on a cron pattern Subscribe to that event with a Lambda  As picture this would look like this:
I use a CloudFormation template as project definition for this task.
So here is my YAML explained step-by-step (whole YAML is attached at the bottom).
I copied the header from an existing template since I have nothing to add here:</description>
    </item>
    
    <item>
      <title>Publish an S3 Event to Lambda through SNS</title>
      <link>https://jens.dev/2017/02/19/publish-an-s3-event-to-lambda-through-sns.html</link>
      <pubDate>Sun, 19 Feb 2017 14:00:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/02/19/publish-an-s3-event-to-lambda-through-sns.html</guid>
      <description>My path through starting with AWS CloudFormation was a somewhat rocky path. Often I wished for simple CF Templates which would only show one pattern at a time. So I&amp;rsquo;m starting a short series where I will try to describe some patterns I experienced and hopefully lower the entry barrier for CloudFormation since it is great tool.
Scenario:
 Raise an S3-Object-Create event Publish that event to SNS Subscribe to that event with a Lambda  As picture this would look like this:</description>
    </item>
    
  </channel>
</rss>
