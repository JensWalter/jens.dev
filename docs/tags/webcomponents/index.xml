<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webcomponents on My personal blog</title>
    <link>https://jens.dev/tags/webcomponents.html</link>
    <description>Recent content in webcomponents on My personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Jun 2017 10:08:54 +0200</lastBuildDate><atom:link href="https://jens.dev/tags/webcomponents/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>how the web component slot system works</title>
      <link>https://jens.dev/2017/06/15/how-the-web-component-slot-system-works.html</link>
      <pubDate>Thu, 15 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/15/how-the-web-component-slot-system-works.html</guid>
      <description>In my previous post I described how to send data in form of attributes to a web component. Since this mechanism is only applicable for simple values, there also is a separate mechanism for inserting complex values.
Let me explain the goal first. If I have a web component which consists of the following internal structure.
&amp;lt;hello-card&amp;gt; #shadow-root &amp;lt;div id=&amp;#34;header&amp;#34;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/hello-card&amp;gt; To use this component, you have to insert it into the DOM and it will render a visual representation.</description>
    </item>
    
    <item>
      <title>how web component attributes work</title>
      <link>https://jens.dev/2017/06/14/how-web-component-attributes-work.html</link>
      <pubDate>Wed, 14 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/14/how-web-component-attributes-work.html</guid>
      <description>My last post described how to build a web component. Any form of data handling was intentionally left out.
So here comes part 2 in my web component series on how to handle data in form of attributes. In HTML it would look like this.
&amp;lt;hello-world name=&amp;#34;jens&amp;#34;&amp;gt;&amp;lt;/hello-world&amp;gt; Since the whole web component exists within one javascript class, the data handling has to be done within that class. The first thing that came to my mind was to extend the constructor to read all attributes on creation.</description>
    </item>
    
    <item>
      <title>writing a hello world web component</title>
      <link>https://jens.dev/2017/06/03/writing-a-hello-world-web-component.html</link>
      <pubDate>Sat, 03 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/03/writing-a-hello-world-web-component.html</guid>
      <description>Web components are the shiny new thing on the horizon for web development. Sadly browser support is not just there, but it seems to be growing pretty quickly.
For an up-to-date overview, you can head over to caniuse.com for a summary.
Starting small.
A web component is Javascript class, which defines an HTML element with its own layout, structure and behavior.
So the most basic web component would look like this.</description>
    </item>
    
  </channel>
</rss>
