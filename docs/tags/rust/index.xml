<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on My personal blog</title>
    <link>https://jens.dev/tags/rust.html</link>
    <description>Recent content in rust on My personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Feb 2021 10:13:50 +0000</lastBuildDate><atom:link href="https://jens.dev/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to access Azure Key Vault in Rust</title>
      <link>https://jens.dev/2021/02/13/how-to-access-azure-key-vault-in-rust.html</link>
      <pubDate>Sat, 13 Feb 2021 10:13:50 +0000</pubDate>
      
      <guid>https://jens.dev/2021/02/13/how-to-access-azure-key-vault-in-rust.html</guid>
      <description>Introduction Since the Azure SDK for Rust is still not published on crates.io, here is an example how to use the current git repo for accessing an Azure Key Vault.
Cargo.toml [package] name = &amp;#34;keyvault-sample&amp;#34; version = &amp;#34;0.1.0&amp;#34; edition = &amp;#34;2018&amp;#34; [dependencies] azure_key_vault = { git = &amp;#34;https://github.com/Azure/azure-sdk-for-rust.git&amp;#34; } azure_identity = { git = &amp;#34;https://github.com/Azure/azure-sdk-for-rust.git&amp;#34; } tokio = { version = &amp;#34;1&amp;#34;, features = [&amp;#34;full&amp;#34;] } main.rs use azure_identity::token_credentials::ClientSecretCredential; use azure_identity::token_credentials::TokenCredentialOptions; use azure_key_vault::KeyVaultClient; #[tokio::main] async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; { //azure credentials  let client_id = &amp;#34;11111111-1111-1111-1111-111111111111&amp;#34;.</description>
    </item>
    
    <item>
      <title>A hello world kubernetes operator in Rust</title>
      <link>https://jens.dev/2020/09/15/a-hello-world-kubernetes-operator-in-rust.html</link>
      <pubDate>Tue, 15 Sep 2020 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2020/09/15/a-hello-world-kubernetes-operator-in-rust.html</guid>
      <description>Introduction I read some samples about how to implement a kubernetes operator in Go which shows the basic priciples, but I was not able to find a similar exercise in rust. So I started looking around, how to do an operator in rust.
Overview An operator in kubernetes is a service that watches the k8s-API for specific events to happen. Usually the operator also registers some custom resource definitions (CRD) to later watch the lifecycle of those objects.</description>
    </item>
    
  </channel>
</rss>
