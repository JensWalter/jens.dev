<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on My personal blog</title>
    <link>https://jens.dev/tags/javascript.html</link>
    <description>Recent content in javascript on My personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Jun 2017 10:08:54 +0200</lastBuildDate><atom:link href="https://jens.dev/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>how the web component slot system works</title>
      <link>https://jens.dev/2017/06/15/how-the-web-component-slot-system-works.html</link>
      <pubDate>Thu, 15 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/15/how-the-web-component-slot-system-works.html</guid>
      <description>In my previous post I described how to send data in form of attributes to a web component. Since this mechanism is only applicable for simple values, there also is a separate mechanism for inserting complex values.
Let me explain the goal first. If I have a web component which consists of the following internal structure.
&amp;lt;hello-card&amp;gt; #shadow-root &amp;lt;div id=&amp;#34;header&amp;#34;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/hello-card&amp;gt; To use this component, you have to insert it into the DOM and it will render a visual representation.</description>
    </item>
    
    <item>
      <title>how web component attributes work</title>
      <link>https://jens.dev/2017/06/14/how-web-component-attributes-work.html</link>
      <pubDate>Wed, 14 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/14/how-web-component-attributes-work.html</guid>
      <description>My last post described how to build a web component. Any form of data handling was intentionally left out.
So here comes part 2 in my web component series on how to handle data in form of attributes. In HTML it would look like this.
&amp;lt;hello-world name=&amp;#34;jens&amp;#34;&amp;gt;&amp;lt;/hello-world&amp;gt; Since the whole web component exists within one javascript class, the data handling has to be done within that class. The first thing that came to my mind was to extend the constructor to read all attributes on creation.</description>
    </item>
    
    <item>
      <title>writing a hello world web component</title>
      <link>https://jens.dev/2017/06/03/writing-a-hello-world-web-component.html</link>
      <pubDate>Sat, 03 Jun 2017 10:08:54 +0200</pubDate>
      
      <guid>https://jens.dev/2017/06/03/writing-a-hello-world-web-component.html</guid>
      <description>Web components are the shiny new thing on the horizon for web development. Sadly browser support is not just there, but it seems to be growing pretty quickly.
For an up-to-date overview, you can head over to caniuse.com for a summary.
Starting small.
A web component is Javascript class, which defines an HTML element with its own layout, structure and behavior.
So the most basic web component would look like this.</description>
    </item>
    
    <item>
      <title>embed a github commit log into markdown</title>
      <link>https://jens.dev/2016/03/10/embed-a-github-commit-log-into-markdown.html</link>
      <pubDate>Thu, 10 Mar 2016 20:52:54 +0200</pubDate>
      
      <guid>https://jens.dev/2016/03/10/embed-a-github-commit-log-into-markdown.html</guid>
      <description>I started to write some documentation for a project of mine and I wanted to embed a change log on certain elements in the documentation. Since my documentation format is mkDocs, all documents are written in markdown.
So here is what I came up with:
**last commits** &amp;lt;div id=&amp;#39;commits&amp;#39; data-path=&amp;#39;src/io/trivium/extension/&amp;#39;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#39;https://code.jquery.com/jquery-2.2.1.min.js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var path = $(&amp;#39;#commits&amp;#39;).data(&amp;#39;path&amp;#39;); var url = &amp;#39;https://api.github.com/repos/trivium-io/trivium/commits?path=&amp;#39;+path; $.ajax({type:&amp;#39;GET&amp;#39;, url:url, success: function(data){ var str=&amp;#34;&amp;lt;table class=&amp;#39;docutils&amp;#39;&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;message&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;date&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;author&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;link&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody&amp;gt;&amp;#34;; for(var idx=0;idx&amp;lt;data.length &amp;amp;&amp;amp; idx&amp;lt;10;idx++){ var one = data[idx]; var d = one.</description>
    </item>
    
    <item>
      <title>add jar to the classpath at runtime in jjs (the hacky way)</title>
      <link>https://jens.dev/2015/06/27/add-jar-to-the-classpath-at-runtime-in-jjs.html</link>
      <pubDate>Sat, 27 Jun 2015 14:22:54 +0200</pubDate>
      
      <guid>https://jens.dev/2015/06/27/add-jar-to-the-classpath-at-runtime-in-jjs.html</guid>
      <description>Normally, the JVM does not allow extending the classpath during runtime. But due to the demand, people found ways around that restriction. To bring one of the work-around to jjs I wrote the following javascript function.
function addUrlToClasspath(pathName){ var/*java.net.URLClassLoader*/ sysloader = /*(java.net.URLClassLoader) */ java.lang.ClassLoader.getSystemClassLoader(); var/*java.lang.Class*/ sysclass = java.net.URLClassLoader.class; var ClassArray = Java.type(&amp;#34;java.lang.Class[]&amp;#34;); var parameters = new ClassArray(1); parameters[0]= java.net.URL.class; var/*java.lang.reflect.Method*/ method = sysclass.getDeclaredMethod(&amp;#34;addURL&amp;#34;, parameters); method.setAccessible(true); var ObjectArray = Java.type(&amp;#34;java.lang.Object[]&amp;#34;); var array = new ObjectArray(1); var/*java.</description>
    </item>
    
    <item>
      <title>doing objects in jjs</title>
      <link>https://jens.dev/2015/06/13/doing-objects-in-jjs.html</link>
      <pubDate>Sat, 13 Jun 2015 08:12:55 +0200</pubDate>
      
      <guid>https://jens.dev/2015/06/13/doing-objects-in-jjs.html</guid>
      <description>Instantiating a Java Object in jjs is pretty straight forward, at least it can be.
var string = new java.lang.String(&amp;#34;hello world&amp;#34;); //alternative var stringClass = Java.type(&amp;#34;java.lang.String&amp;#34;); var string = new stringClass(&amp;#34;hello world&amp;#34;); This was so easy that I instantly continued trying Arrays.
//doing it javascript style var arr=[]; arr[0]=&amp;#34;hello&amp;#34;; arr[1]=&amp;#34;world&amp;#34;; java.lang.String.join(&amp;#34; &amp;#34;,arr); //doing it java style var stringClass=java.lang.String.class; var arr2==java.lang.reflect.Array.newInstance(StringClass,2); You could argue that using the java style initialization doesn&amp;rsquo;t add anything and complicates stuff overly.</description>
    </item>
    
    <item>
      <title>read the content of a file in one line in jjs</title>
      <link>https://jens.dev/2015/06/12/read-the-content-of-a-file-in-one-line-in-jjs.html</link>
      <pubDate>Fri, 12 Jun 2015 12:32:25 +0200</pubDate>
      
      <guid>https://jens.dev/2015/06/12/read-the-content-of-a-file-in-one-line-in-jjs.html</guid>
      <description>The task is pretty simple, read the content of text file as one-liner. Here is what I came up with.
var filename = &amp;#34;engine.log&amp;#34;; var content = new java.lang.String( java.nio.file.Files.readAllBytes( java.nio.file.Paths.get(filename) ) ); </description>
    </item>
    
    <item>
      <title>print something to the console in jjs</title>
      <link>https://jens.dev/2015/06/11/print-something-to-the-console-in-jjs.html</link>
      <pubDate>Thu, 11 Jun 2015 11:12:45 +0200</pubDate>
      
      <guid>https://jens.dev/2015/06/11/print-something-to-the-console-in-jjs.html</guid>
      <description>Once I got jjs running I started with some pretty simple stuff. To print something to the console I found the following ways.
//javascript style print(&amp;#34;hello world&amp;#34;); // don&amp;#39;t forget the parentheses here, otherwise jjs wont like you //java style var System = Java.type(&amp;#39;java.lang.System&amp;#39;); System.out.println(&amp;#34;hello world&amp;#34;); //of course there is an error out too System.err.println(&amp;#34;hello world&amp;#34;); Don&amp;rsquo;t forget to declare System as Variable, otherwise it will fail.
nashorn&amp;gt; System.out.println(&amp;#34;hello world&amp;#34;); script error: ReferenceError: &amp;#34;System&amp;#34; is not defined in &amp;lt;STDIN&amp;gt; at line number 1 </description>
    </item>
    
    <item>
      <title>using jjs under osx</title>
      <link>https://jens.dev/2015/06/06/jjs-under-osx.html</link>
      <pubDate>Sat, 06 Jun 2015 18:22:03 +0200</pubDate>
      
      <guid>https://jens.dev/2015/06/06/jjs-under-osx.html</guid>
      <description>Recently I wanted to try the new java8 integration javascipt shell. So I installed the Oracle JDK on my mac, opened a terminal and got the following result:
localhost:~ jens$ jjs -bash: jjs: command not found After some googling around I found that the jjs execution is part of the packaged jdk but not really there. After some time I found that it is installed under the name jrunscript. So now I only had to alias jjs to jrunscript and I could start.</description>
    </item>
    
    <item>
      <title>URL encode / decode in JavaScript</title>
      <link>https://jens.dev/2010/02/26/url-encode-decode-in-javascript-2.html</link>
      <pubDate>Fri, 26 Feb 2010 21:57:13 +0000</pubDate>
      
      <guid>https://jens.dev/2010/02/26/url-encode-decode-in-javascript-2.html</guid>
      <description>Decoding and Encoding URLs in JavaScript should be a pretty easy thing to do especially since all browsers still have the functionality built-in. Interestingly no browser allows the JavaScript runtime to use this feature. So I had to write it for myself.
The code I came up with is far from perfect but it worked for me. To decode an URL use url_decode(url) and to reverse it just call the utf16to8 function.</description>
    </item>
    
    <item>
      <title>tracking virtual links with google analytics</title>
      <link>https://jens.dev/2010/01/04/tracking-virtual-links-with-google-analytics.html</link>
      <pubDate>Mon, 04 Jan 2010 19:57:00 +0000</pubDate>
      
      <guid>https://jens.dev/2010/01/04/tracking-virtual-links-with-google-analytics.html</guid>
      <description>Tracking dynamic sites is sometimes a bit tricky. Typically tracking systems are specialized in tracking page views. More sophisticated system have there own way of tracking custom event (like shown here).
Unfortunately I needed to track clicks on a HTML canvas. To make these clicks visible to a tracking system, I wanted to transform each click to virtual URL. That way I could use Google analytics not only for tracking but also for popularity statistics of certain content.</description>
    </item>
    
    <item>
      <title>cloud-the-web - my new web project</title>
      <link>https://jens.dev/2009/08/08/cloud-the-web-my-new-web-project.html</link>
      <pubDate>Sat, 08 Aug 2009 12:28:01 +0000</pubDate>
      
      <guid>https://jens.dev/2009/08/08/cloud-the-web-my-new-web-project.html</guid>
      <description>A little time ago I started experimenting with some of the new HTML 5 features. Some seam pretty impressive although some a rather unnecessary in my opinion. But one thing got me really hooked – the HTML canvas.
The possibilities of this control are only limited by the performance of javascript and the missing 3d feature (hopefully this comes pretty soon). With that technology I finally got some way to implement something I wanted to try for some time now.</description>
    </item>
    
    <item>
      <title>installing GLUEscript on debian squeeze 64bit</title>
      <link>https://jens.dev/2009/07/15/installing-gluescript-on-debian-squeeze-64bit.html</link>
      <pubDate>Wed, 15 Jul 2009 16:06:15 +0000</pubDate>
      
      <guid>https://jens.dev/2009/07/15/installing-gluescript-on-debian-squeeze-64bit.html</guid>
      <description>The GLUEscript runtime is still in an pretty early development stage. Basically they use the Firefox spidermonkey javascript engine and build some useful libraries on top of that (like curl, mysql, filesystem support).
They also provide a little help in form of a little text file, but with this, it still took me half a day for my first installation. Most issues I got were based on version mismatches, because debian and also ubuntu use older versions of the required libraries.</description>
    </item>
    
  </channel>
</rss>
