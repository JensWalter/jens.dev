<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lambda on My personal blog</title>
    <link>/tags/lambda/</link>
    <description>Recent content in lambda on My personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2019 10:08:54 +0200</lastBuildDate><atom:link href="/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Retrieve the API key name in AWS API Gateway</title>
      <link>/2019/04/12/retrieve-the-api-keyname-in-aws-api-gateway/</link>
      <pubDate>Fri, 12 Apr 2019 10:08:54 +0200</pubDate>
      
      <guid>/2019/04/12/retrieve-the-api-keyname-in-aws-api-gateway/</guid>
      <description>The AWS API-Gateway does support authentication through API Key. It is a very convenient feature to have, especially since other functionality such a throttling and request quotas also come through that feature.
That is all good, as long as all your required functionality is provided by AWS. But what I needed was business-like Dashboard which provides insight into how my API was used by different clients.
Since all clients are identified by API Key, I hoped for some mechanism within API-Gateway to provide information such as key name to my Lambda implementation.</description>
    </item>
    
    <item>
      <title>generate a self signed certificate with AWS Lambda</title>
      <link>/2017/01/05/generate-a-self-signed-certificate-with-aws-lambda/</link>
      <pubDate>Thu, 05 Jan 2017 19:58:54 +0200</pubDate>
      
      <guid>/2017/01/05/generate-a-self-signed-certificate-with-aws-lambda/</guid>
      <description>For testing purposes I needed a service which would generate a self signed certificate. To reduce my dependency on locally installed tools, I implemented this service as AWS Lambda function (or microservice if you want to call it that).
Here is what I came up with:
The generated output looks like this:
{ &amp;#34;cert&amp;#34;: { &amp;#34;filename&amp;#34;: &amp;#34;cert.pem&amp;#34;, &amp;#34;fileContent&amp;#34;: &amp;#34;LS0tLS1CRUdJTiBDRVJU...&amp;#34; }, &amp;#34;key&amp;#34;: { &amp;#34;filename&amp;#34;: &amp;#34;key.pem&amp;#34;, &amp;#34;fileContent&amp;#34;: &amp;#34;LS0tLS1CRUdJTiBQUklW...&amp;#34; } } PS: you might need to adjust the CN to your own domain name, currently all certificates will have the CN apimeister.</description>
    </item>
    
    <item>
      <title>auto-confirming a newly created Cognito user</title>
      <link>/2016/11/11/auto-confirming-a-newly-created-cognito-user/</link>
      <pubDate>Fri, 11 Nov 2016 19:49:54 +0200</pubDate>
      
      <guid>/2016/11/11/auto-confirming-a-newly-created-cognito-user/</guid>
      <description>In Cognito all registered users need to be confirmed before they can interact with other services.
Out-of-the-box Amazon supports confirmation by
 email SMS web UI lambda  To automate this process, confirming with a Lambda function is the only way to trigger the confirmation process. So I created the following lambda to confirm all created users.
exports.handler = (event, context, callback) =&amp;gt; { event.response.autoConfirmUser=true; callback(null, event); }; Then I used this lambda as &amp;ldquo;Pre sign-up&amp;rdquo;-trigger.</description>
    </item>
    
  </channel>
</rss>
